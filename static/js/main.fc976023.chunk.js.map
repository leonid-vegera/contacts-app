{"version":3,"sources":["components/AddContactForm/AddContactForm.jsx","components/ContactsList/ContactsList.jsx","components/ContactInfo/ContactInfo.jsx","App.jsx","index.jsx"],"names":["AddContactForm","setContacts","contacts","useState","name","setName","number","setNumber","email","setEmail","className","onSubmit","event","preventDefault","newContact","id","Date","addContact","type","placeholder","value","onChange","target","required","ContactsList","visibleContacts","setSelectedId","selectedId","removeContact","query","setQuery","newQuery","toLocaleLowerCase","filter","contact","toLowerCase","startsWith","map","toUpperCase","onClick","disabled","ContactInfo","newField","setNewField","newValue","setNewValue","entries","Object","item","Math","random","newNote","newSection","assign","addField","App","selectedPerson","find","length","contactId","confirm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc976023.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './AddContactForm.scss';\n\nexport const AddContactForm = ({ setContacts, contacts }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [email, setEmail] = useState('');\n\n  const addContact = (name, number, email) => {\n    const newContact = {\n      name,\n      number,\n      email,\n      id: +new Date(),\n    };\n    setContacts(\n      [...contacts,\n        newContact\n      ]\n    )\n  }\n\n  const clearFields = () => {\n    setName('');\n    setNumber('');\n    setEmail('');\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    addContact(name, number, email);\n    clearFields();\n  }\n\n  return (\n    <form\n      className=\"add-form\"\n      onSubmit={submitHandler}\n    >\n      <h2 className=\"title\">New contact form</h2>\n      <div className=\"add-field\">\n        <label>\n          Person's name\n          <div>\n            <input\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter new name\"\n              value={name}\n              onChange={(event) => {\n                setName(event.target.value)\n              }}\n              required\n            />\n          </div>\n        </label>\n      </div>\n\n      <div>\n        <label>\n          Person's phone number\n          <div className=\"add-field\">\n            <input\n              type=\"tel\"\n              // pattern=\"[0-9]{10}\"\n              name=\"number\"\n              placeholder=\"Enter phone number\"\n              value={number}\n              onChange={(event) => {\n                setNumber(event.target.value)\n              }}\n            // required\n            />\n          </div>\n        </label>\n      </div>\n\n      <div>\n        <label>\n          Person's e-mail\n          <div className=\"add-field\">\n            <input\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Enter e-mail\"\n              value={email}\n              onChange={(event) => {\n                setEmail(event.target.value)\n              }}\n            // required\n            />\n          </div>\n        </label>\n      </div>\n\n      <div>\n        <button\n          type=\"submit\"\n          className=\"button\"\n        >\n          Add contact\n        </button>\n      </div>\n\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './ContactsList.scss';\n\nexport const ContactsList = ({ contacts, setSelectedId, selectedId, removeContact }) => {\n  const [query, setQuery] = useState('');\n\n  const newQuery = query.toLocaleLowerCase();\n  let visibleContacts;\n  if (!query) {\n    visibleContacts = contacts;\n  } else {\n    visibleContacts = contacts.filter(contact => \n      contact.name.toLowerCase().startsWith(newQuery))\n  }\n\n  return (\n    <div className=\"contacts-list\">\n      <h2 className=\"title\">Contacts</h2>\n\n      <input\n        className=\"contacts-input\"\n        type=\"text\"\n        name=\"query\"\n        placeholder=\"Enter first letters to find contact\"\n        value={query}\n        onChange={(event) => {\n          setQuery(event.target.value)\n        }}\n      />\n\n      {visibleContacts.map(contact => (\n        <div key={contact.id} className=\"contacts-item\">\n          <strong>{contact.name.toUpperCase()}</strong>\n          <div className=\"contacts-list-buttons\">\n\n            <button\n              type=\"button\"\n              className=\"button contacts-list-button\"\n              onClick={() => {\n                removeContact(contact.id)\n              }}\n              disabled={contact.id === selectedId}\n            >\n              Delete\n            </button>\n\n            {contact.id !== selectedId ? (\n              <button\n                type=\"button\"\n                className=\"button contacts-list-button\"\n                onClick={() => {\n                  setSelectedId(contact.id)\n                }}\n              >\n                Open\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"button contacts-list-button\"\n                onClick={() => {\n                  setSelectedId(0)\n                }}\n              >\n                Close\n              </button>\n            )}\n\n          </div>\n        </div>\n      ))}\n    </div >\n  )\n};\n","import React, { useState } from 'react';\nimport './ContactInfo.scss';\n\nexport const ContactInfo = ({ contact, contacts, setContacts, selectedId }) => {\n  const [newField, setNewField] = useState('');\n  const [newValue, setNewValue] = useState('');\n\n  let entries = null;\n  if (!contact) {\n    return;\n  }\n  entries = Object.entries(contact);\n\n  const addField = (newNote, newValue) => {\n    const newSection = {\n      [newNote]: newValue,\n    };\n    Object.assign(contact, newSection)\n  }\n\n  const clearFields = () => {\n    setNewField('');\n    setNewValue('');\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    addField(newField, newValue);\n    clearFields();\n  }\n\n  return (\n    <div className=\"contact-info\">\n      <h2 className=\"title\">Contact information</h2>\n      {entries.map(item => (\n        <section\n          key={Math.random()}\n          className=\"contact-info-list\"\n        >\n          <div className=\"contact-info-key\">{item[0] !== 'id' ? item[0] : ''}</div>\n          <div className=\"contact-info-value\">\n            <div>{item[0] !== 'id' ? item[1] : ''}</div>\n{/*             <span\n              title=\"click to delete\"\n              className=\"contact-info-remove\"\n              onClick={(selectedId) => {\n                let key = item[0];\n                setContacts(\n                  contacts.map(contact => {\n                    if (contact.id !== selectedId) {\n                      return contact;\n                    }\n                    return {\n                      ...contact,\n                      // delete contact['key'],\n                    }\n                  })\n                )\n              }}\n            >\n              {item[0] !== 'id' ? 'x' : ''}\n            </span> */}\n          </div>\n        </section>\n      ))}\n      <hr></hr>\n\n      <h3 className=\"title\">\n        Add new notes to this contact\n      </h3>\n      <form onSubmit={submitHandler}>\n        <section className=\"contact-info-inputs\">\n          <input\n            type=\"text\"\n            name=\"newField\"\n            placeholder=\"Enter note name\"\n            value={newField}\n            onChange={(event) => {\n              setNewField(event.target.value);\n            }}\n            required\n          />\n          <input\n            type=\"text\"\n            name=\"newValue\"\n            placeholder=\"Enter note text\"\n            value={newValue}\n            onChange={(event) => {\n              setNewValue(event.target.value);\n            }}\n            required\n          />\n        </section>\n        <button\n          type=\"submit\"\n          className=\"button contact-info-button\"\n        >\n          Add note\n        </button>\n      </form>\n\n    </div>\n  )\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { AddContactForm } from './components/AddContactForm';\nimport { ContactsList } from './components/ContactsList';\nimport { ContactInfo } from './components/ContactInfo';\n\nfunction App() {\n  const [contacts, setContacts] = useState([]);\n  const [selectedId, setSelectedId] = useState(0);\n\n  const selectedPerson = contacts.find(contact => (\n    contact.id === selectedId\n  ))\n\n  const removeContact = (contactId) => {\n    /* eslint-disable-next-line */\n    const result = confirm('Do you really want to delete this contact?')\n    if (result) {\n      setContacts(contacts.filter(item => (\n        contactId !== item.id\n      )))\n    }\n  }\n\n  return (\n    <div className=\"main\">\n      <div className=\"main-left\">\n        <AddContactForm\n          contacts={contacts}\n          setContacts={setContacts}\n        />\n        {contacts.length === 0 ? (\n          <h2 className=\"title\">No contacts added yet</h2>\n        ) : (\n          <ContactsList\n            contacts={contacts}\n            setSelectedId={setSelectedId}\n            selectedId={selectedId}\n            removeContact={removeContact}\n          />\n        )}\n      </div>\n\n      {selectedId !== 0 && (\n        <div className=\"main-right\">\n          <ContactInfo\n            contact={selectedPerson}\n            contacts={contacts}\n            setContacts={setContacts}\n            selectedId={selectedId}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
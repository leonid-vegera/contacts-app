{"version":3,"sources":["utils/ContactsContext.jsx","components/AddContactForm/AddContactForm.jsx","components/ContactsList/ContactsList.jsx","components/Field/Field.jsx","components/ContactInfo/ContactInfo.jsx","App.jsx","utils/useLocalStarage.jsx","index.jsx"],"names":["ContactsContext","createContext","AddContactForm","useState","name","setName","number","setNumber","email","setEmail","birthday","setBirthday","info","setInfo","useContext","addContact","setOpenForm","newContact","id","Date","className","onSubmit","event","preventDefault","type","placeholder","autoFocus","value","onChange","target","required","pattern","max","onClick","ContactsList","visibleContacts","contacts","selectedId","selectId","removeContact","query","setQuery","newQuery","toLocaleLowerCase","filter","contact","toLowerCase","startsWith","length","map","toUpperCase","disabled","Field","item","changeContact","setValue","isActive","setActive","isPhoneNumber","isEmail","hrefLink","title","classNames","href","infoFieldValue","confirm","changeNote","ContactInfo","newField","setNewField","newValue","setNewValue","selectedContact","entries","Object","Math","random","newNote","newSection","assign","addField","App","key","initialValue","JSON","parse","localStorage","getItem","setItem","stringify","useLocalStorage","setContacts","setSelectedId","openForm","find","contextValue","contactId","changedContact","Provider","ReactDOM","render","document","getElementById"],"mappings":"6RAEaA,G,MAAkBC,wBAAc,K,eCEhCC,EAAiB,WAC5B,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAgCN,mBAAS,IAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAwBR,mBAAS,IAAjC,mBAAOS,EAAP,KAAaC,EAAb,KAEA,EAAoCC,qBAAWd,GAAvCe,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,YAEdC,EAAa,CACjBb,OACAE,SACAE,QACAE,WACAE,OACAM,IAAK,IAAIC,MAkBX,OACE,uBACEC,UAAU,sBACVC,SAVkB,SAACC,GACrBA,EAAMC,iBACNR,EAAWE,GATXZ,EAAQ,IACRE,EAAU,IACVE,EAAS,IACTE,EAAY,IACZE,EAAQ,IAORG,GAAY,IAIZ,UAIE,oBAAII,UAAU,QAAd,6BACA,kDAEE,qBAAKA,UAAU,YAAf,SACE,uBACEI,KAAK,OACLpB,KAAK,OACLqB,YAAY,kBACZL,UAAU,QACVM,WAAW,EACXC,MAAOvB,EACPwB,SAAU,SAACN,GACTjB,EAAQiB,EAAMO,OAAOF,QAEvBG,UAAQ,SAKd,0DAEE,qBAAKV,UAAU,YAAf,SACE,uBACEI,KAAK,MACLO,QAAQ,kBACR3B,KAAK,SACLqB,YAAY,6BACZL,UAAU,QACVO,MAAOrB,EACPsB,SAAU,SAACN,GACTf,EAAUe,EAAMO,OAAOF,eAM/B,oDAEE,qBAAKP,UAAU,YAAf,SACE,uBACEI,KAAK,QACLpB,KAAK,QACLqB,YAAY,eACZL,UAAU,QACVO,MAAOnB,EACPoB,SAAU,SAACN,GACTb,EAASa,EAAMO,OAAOF,eAM9B,sDAEE,qBAAKP,UAAU,YAAf,SACE,uBACEI,KAAK,OACLQ,IAAI,aACJ5B,KAAK,WACLgB,UAAU,uBACVO,MAAOjB,EACPkB,SAAU,SAACN,GACTX,EAAYW,EAAMO,OAAOF,eAMjC,yDAEE,qBAAKP,UAAU,YAAf,SACE,0BACEhB,KAAK,OACLqB,YAAY,+BACZL,UAAU,2BACVO,MAAOf,EACPgB,SAAU,SAACN,GACTT,EAAQS,EAAMO,OAAOF,eAM7B,0BAASP,UAAU,mBAAnB,UACE,wBACEI,KAAK,SACLJ,UAAU,yBAFZ,0BAMA,wBACEI,KAAK,SACLJ,UAAU,yBACVa,QAAS,SAACX,GACRN,GAAY,IAJhB,yBChIKkB,G,MAAe,WAC1B,IAKIC,EALJ,EAAuErB,qBAAWd,GAA1EoC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,WAAYC,EAA9B,EAA8BA,SAAUC,EAAxC,EAAwCA,cAAevB,EAAvD,EAAuDA,YAEvD,EAA0Bb,mBAAS,IAAnC,mBAAOqC,EAAP,KAAcC,EAAd,KAEMC,EAAWF,EAAMG,oBASvB,OAJER,EAHGK,EAGeJ,EAASQ,QAAO,SAAAC,GAAO,OACvCA,EAAQzC,KAAK0C,cAAcC,WAAWL,MAHtBN,EAOlB,sBAAKhB,UAAU,2BAAf,UAEGgB,EAASY,OAAS,EACjB,oBAAI5B,UAAU,QAAd,yBAEE,qCACE,oBAAIA,UAAU,QAAd,sBAEA,uBACEA,UAAU,uBACVI,KAAK,OACLpB,KAAK,QACLqB,YAAY,sCACZE,MAAOa,EACPZ,SAAU,SAACN,GACTmB,EAASnB,EAAMO,OAAOF,UAIzBQ,EAAgBc,KAAI,SAAAJ,GAAO,OAC1B,sBAAsBzB,UAAU,gBAAhC,UACE,qBAAKA,UAAU,sBAAf,SACE,iCAASyB,EAAQzC,KAAK8C,kBAGxB,sBAAK9B,UAAU,wBAAf,UACE,wBACEI,KAAK,SACLJ,UAAU,8BACVa,QAAS,WACPM,EAAcM,EAAQ3B,KAExBiC,SAAUN,EAAQ3B,KAAOmB,EAN3B,oBAWCQ,EAAQ3B,KAAOmB,EACd,wBACEb,KAAK,SACLJ,UAAU,8BACVa,QAAS,WACPK,EAASO,EAAQ3B,KAJrB,kBAUA,wBACEM,KAAK,SACLJ,UAAU,0DACVa,QAAS,WACPK,EAAS,IAJb,wBA5BIO,EAAQ3B,UA6C1B,wBACEM,KAAK,SACLJ,UAAU,2BACVa,QAAS,WACPjB,GAAY,IAJhB,8B,sCC9EOoC,EAAQ,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACtB,EAAgDvC,qBAAWd,GAAnDsD,EAAR,EAAQA,cAAejB,EAAvB,EAAuBA,WAAYD,EAAnC,EAAmCA,SAEnC,EAA0BjC,mBAAS,CAACkD,EAAK,KAAzC,mBAAO1B,EAAP,KAAc4B,EAAd,KACA,EAA8BpD,oBAAS,GAAvC,mBAAOqD,EAAP,KAAiBC,EAAjB,KAEMC,EAA4B,WAAZL,EAAK,GACrBM,EAAsB,UAAZN,EAAK,GAyDrB,OACE,qCACE,qBAAKjC,UAAU,YAAf,SAAwC,OAAZiC,EAAK,GAAcA,EAAK,GAAK,KACzD,sBAAKjC,UAAU,eAAf,UAtBmB,WACrB,IAAMwC,EAAWF,EAAgB,OAAS,UAC1C,OAAIA,GAAiBC,EAEjB,qBACEE,MAAOH,EAAgB,gBAAkB,sBACzCtC,UAAW0C,IAAW,cAAe,CAAC,kBAAmBN,IAF3D,SAIE,mBAAGO,KAAI,UAAKH,GAAL,OAAgBP,EAAK,IAAMjC,UAAU,mBAA5C,SAAgEiC,EAAK,OAKzE,qBAAKjC,UAAW0C,IAAW,cAAe,CAAC,kBAAmBN,IAA9D,SACe,OAAZH,EAAK,GAAcA,EAAK,GAAK,KAS7BW,GACD,8BACIR,EAUE,qBAAKpC,UAAU,gBAAf,SACE,uBACEC,SArDM,SAACC,GACrBA,EAAMC,iBArBW,SAACc,GAEL4B,QAAQ,uCAInBX,EACElB,EAASa,KAAI,SAAAJ,GACX,OAAIA,EAAQ3B,KAAOmB,EACVQ,EAEF,2BACFA,GADL,kBAEGQ,EAAK,GAAK1B,QATjB4B,EAAS,CAACF,EAAK,KAkBjBa,CAAW7B,GACXoB,GAAU,IAiDE,UAGE,uBACEjC,KAjDZkC,EACK,MAELC,EACK,QAEF,OA4CS5B,QAAS2B,EAAgB,kBAAoB,GAC7C/B,MAAOA,EACPC,SAAU,SAACN,GACTiC,EAASjC,EAAMO,OAAOF,UAG1B,oCACE,wBACEH,KAAK,SACLJ,UAAU,oBAFZ,0BAOA,wBACEI,KAAK,SACLJ,UAAU,oBACVa,QAAS,WACPwB,GAAU,GACVF,EAAS,CAACF,EAAK,MALnB,4BA9BgB,OAAZA,EAAK,GAAc,GAC/B,wBACE7B,KAAK,SACLJ,UAAU,oBACVa,QAAS,WAAQwB,GAAWD,IAH9B,2BCxECW,G,MAAc,WACzB,MAAgChE,mBAAS,IAAzC,mBAAOiE,EAAP,KAAiBC,EAAjB,KACA,EAAgClE,mBAAS,IAAzC,mBAAOmE,EAAP,KAAiBC,EAAjB,KAEA,EAAsCzD,qBAAWd,GAAzCwE,EAAR,EAAQA,gBAAiBlC,EAAzB,EAAyBA,SAErBmC,EAAU,KACd,GAAKD,EAAL,CAGAC,EAAUC,OAAOD,QAAQD,GAoBzB,OACE,sBAAKpD,UAAU,0BAAf,UACE,oBAAIA,UAAU,QAAd,iCACCqD,EAAQxB,KAAI,SAAAI,GAAI,OACf,yBAEEjC,UAAU,oBAFZ,SAIE,cAAC,EAAD,CACEiC,KAAMA,KAJHsB,KAAKC,aAQd,uBAEA,oBAAIxD,UAAU,QAAd,2CAGA,uBAAMC,SAxBY,SAACC,GACrBA,EAAMC,iBAbS,SAACsD,EAASP,GACzB,IAAMQ,EAAU,eACbD,EAAUP,GAEbI,OAAOK,OAAOP,EAAiBM,GAU/BE,CAASZ,EAAUE,GANnBD,EAAY,IACZE,EAAY,KA2BV,UACE,0BAASnD,UAAU,sBAAnB,UACE,uBACEI,KAAK,OACLpB,KAAK,WACLqB,YAAY,kBACZL,UAAU,QACVO,MAAOyC,EACPxC,SAAU,SAACN,GACT+C,EAAY/C,EAAMO,OAAOF,QAE3BG,UAAQ,IAEV,uBACEN,KAAK,OACLpB,KAAK,WACLqB,YAAY,kBACZL,UAAU,QACVO,MAAO2C,EACP1C,SAAU,SAACN,GACTiD,EAAYjD,EAAMO,OAAOF,QAE3BG,UAAQ,OAGZ,0BAASV,UAAU,uBAAnB,UACE,wBACEI,KAAK,SACLJ,UAAU,6BAFZ,sBAMA,wBACEI,KAAK,SACLJ,UAAU,6BACVa,QAAS,WACPK,EAAS,IAJb,8BCZK2C,MAjEf,WACE,MCP6B,SAACC,EAAKC,GACnC,MAA0BhF,oBAAS,WACjC,IACE,OAAOiF,KAAKC,MAAMC,aAAaC,QAAQL,KAASC,EAChD,SACA,OAAOA,MAJX,mBAAOxD,EAAP,KAAc4B,EAAd,KAWA,MAAO,CAAC5B,EAJK,SAACA,GACZ4B,EAAS5B,GACT2D,aAAaE,QAAQN,EAAKE,KAAKK,UAAU9D,MDHX+D,CAAgB,WAAY,IAA5D,mBAAOtD,EAAP,KAAiBuD,EAAjB,KACA,EAAoCxF,mBAAS,GAA7C,mBAAOkC,EAAP,KAAmBuD,EAAnB,KACA,EAAgCzF,oBAAS,GAAzC,mBAAO0F,EAAP,KAAiB7E,EAAjB,KAEMwD,EAAkBpC,EAAS0D,MAAK,SAAAjD,GAAO,OAC3CA,EAAQ3B,KAAOmB,KA6BX0D,EAAe,CACnBhF,WA3BiB,SAACE,GAClB0E,EAAY,GAAD,mBACLvD,GADK,CAEPnB,MAyBJmB,WACAoC,kBACAnC,aACAC,SAvBe,SAACpB,GAChB0E,EAAc1E,IAuBdqB,cApBoB,SAACyD,GAEN/B,QAAQ,+CAErB0B,EAAYvD,EAASQ,QAAO,SAAAS,GAAI,OAC9B2C,IAAc3C,EAAKnC,QAgBvBoC,cAXoB,SAAC2C,GACrBN,EAAYM,IAWZjF,eAGF,OACE,qBAAKI,UAAU,OAAf,SACE,eAACpB,EAAgBkG,SAAjB,CAA0BvE,MAAOoE,EAAjC,WACKF,GAA2B,IAAfxD,GACb,cAAC,EAAD,IAGDwD,GACC,cAAC,EAAD,IAGc,IAAfxD,GACC,cAAC,EAAD,U,ME7DV8D,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.fdb52582.chunk.js","sourcesContent":["import {createContext} from 'react';\n\nexport const ContactsContext = createContext([]);\n","import React, { useState, useContext } from 'react';\nimport { ContactsContext } from '../../utils/ContactsContext';\nimport './AddContactForm.scss';\n\nexport const AddContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [email, setEmail] = useState('');\n  const [birthday, setBirthday] = useState('');\n  const [info, setInfo] = useState('');\n\n  const { addContact, setOpenForm } = useContext(ContactsContext);\n\n  const newContact = {\n    name,\n    number,\n    email,\n    birthday,\n    info,\n    id: +new Date(),\n  };\n\n  const clearFields = () => {\n    setName('');\n    setNumber('');\n    setEmail('');\n    setBirthday('');\n    setInfo('');\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    addContact(newContact);\n    clearFields();\n    setOpenForm(false);\n  }\n\n  return (\n    <form\n      className=\"add-form main__form\"\n      onSubmit={submitHandler}\n    >\n      <h2 className=\"title\">Add new contact</h2>\n      <label>\n        Person's name\n        <div className=\"add-field\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter full name\"\n            className=\"input\"\n            autoFocus={true}\n            value={name}\n            onChange={(event) => {\n              setName(event.target.value)\n            }}\n            required\n          />\n        </div>\n      </label>\n\n      <label>\n        Person's phone number\n        <div className=\"add-field\">\n          <input\n            type=\"tel\"\n            pattern=\"[+]{1}[0-9]{12}\"\n            name=\"number\"\n            placeholder=\"Enter phone number +380...\"\n            className=\"input\"\n            value={number}\n            onChange={(event) => {\n              setNumber(event.target.value)\n            }}\n          />\n        </div>\n      </label>\n\n      <label>\n        Person's e-mail\n        <div className=\"add-field\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Enter e-mail\"\n            className=\"input\"\n            value={email}\n            onChange={(event) => {\n              setEmail(event.target.value)\n            }}\n          />\n        </div>\n      </label>\n\n      <label>\n        Person's birthday\n        <div className=\"add-field\">\n          <input\n            type=\"date\"\n            max=\"2015-01-01\"\n            name=\"birthday\"\n            className=\"input input-birthday\"\n            value={birthday}\n            onChange={(event) => {\n              setBirthday(event.target.value)\n            }}\n          />\n        </div>\n      </label>\n\n      <label>\n        Person's information\n        <div className=\"add-field\">\n          <textarea\n            name=\"info\"\n            placeholder=\"Enter additional information\"\n            className=\"input add-field-textarea\"\n            value={info}\n            onChange={(event) => {\n              setInfo(event.target.value)\n            }}\n          />\n        </div>\n      </label>\n\n      <section className='add-form-buttons'>\n        <button\n          type=\"submit\"\n          className=\"button add-form-button\"\n        >\n          Save contact\n        </button>\n        <button\n          type=\"button\"\n          className=\"button add-form-button\"\n          onClick={(event) => {\n            setOpenForm(false)\n          }}\n        >\n          Exit\n        </button>\n      </section>\n    </form>\n  );\n};\n","import React, { useState, useContext } from 'react';\nimport { ContactsContext } from '../../utils/ContactsContext';\nimport './ContactsList.scss';\n\nexport const ContactsList = () => {\n  const { contacts, selectedId, selectId, removeContact, setOpenForm } = useContext(ContactsContext);\n\n  const [query, setQuery] = useState('');\n\n  const newQuery = query.toLocaleLowerCase();\n  let visibleContacts;\n  if (!query) {\n    visibleContacts = contacts;\n  } else {\n    visibleContacts = contacts.filter(contact => \n      contact.name.toLowerCase().startsWith(newQuery))\n  }\n\n  return (\n    <div className=\"contacts-list main__form\">\n\n      {contacts.length < 1 ? (\n        <h2 className=\"title\">No contacts</h2>\n      ) : (\n          <>\n            <h2 className=\"title\">Contacts</h2>\n\n            <input\n              className=\"input contacts-input\"\n              type=\"text\"\n              name=\"query\"\n              placeholder=\"Enter first letters to find contact\"\n              value={query}\n              onChange={(event) => {\n                setQuery(event.target.value)\n              }}\n            />\n\n            {visibleContacts.map(contact => (\n              <div key={contact.id} className=\"contacts-item\">\n                <div className=\"contacts-list-title\">\n                  <strong>{contact.name.toUpperCase()}</strong>\n                </div>\n                \n                <div className=\"contacts-list-buttons\">\n                  <button\n                    type=\"button\"\n                    className=\"button contacts-list-button\"\n                    onClick={() => {\n                      removeContact(contact.id)\n                    }}\n                    disabled={contact.id === selectedId}\n                  >\n                    Delete\n                  </button>\n\n                  {contact.id !== selectedId ? (\n                    <button\n                      type=\"button\"\n                      className=\"button contacts-list-button\"\n                      onClick={() => {\n                        selectId(contact.id)\n                      }}\n                    >\n                      View\n                    </button>\n                  ) : (\n                    <button\n                      type=\"button\"\n                      className=\"button contacts-list-button contacts-list-button-active\"\n                      onClick={() => {\n                        selectId(0)\n                      }}\n                    >\n                      Close\n                    </button>\n                  )}\n\n                </div>\n              </div>\n            ))}\n          </>\n      )}\n\n      <button\n        type=\"button\"\n        className=\"contacts-list-add-button\"\n        onClick={() => {\n          setOpenForm(true)\n        }}\n\n      >\n        ADD CONTACT\n      </button>\n\n    </div >\n  )\n};\n","import { useState, useContext } from 'react';\nimport { ContactsContext } from '../../utils/ContactsContext';\nimport './Field.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const Field = ({ item }) => {\n  const { changeContact, selectedId, contacts } = useContext(ContactsContext);\n\n  const [value, setValue] = useState([item[1]]);\n  const [isActive, setActive] = useState(false);\n\n  const isPhoneNumber = item[0] === 'number'\n  const isEmail = item[0] === 'email'\n\n  const changeNote = (selectedId) => {\n    /* eslint-disable-next-line */\n    let result = confirm('Do you really want to save changes?')\n    if (!result) {\n      setValue([item[1]])\n    } else {\n      changeContact(\n        contacts.map(contact => {\n          if (contact.id !== selectedId) {\n            return contact;\n          }\n          return {\n            ...contact,\n            [item[0]]: value,\n          }\n        })\n      )\n    }\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    changeNote(selectedId);\n    setActive(false);\n  }\n\n  const handleInputType = () => {\n    if (isPhoneNumber) {\n      return 'tel';\n    }\n    if (isEmail) {\n      return 'email'\n    }\n    return 'text';\n  }\n\n  const infoFieldValue = () => {\n    const hrefLink = isPhoneNumber ? 'tel:' : 'mailto:';\n    if (isPhoneNumber || isEmail) {\n      return (\n        <div\n          title={isPhoneNumber ? \"Click to call\" : \"Click to send email\"}\n          className={classNames(\"field-value\", {'field-is-active': isActive})}\n        >\n          <a href={`${hrefLink}${item[1]}`} className=\"field-connection\">{item[1]}</a>\n        </div>\n      )\n    }\n    return (\n      <div className={classNames(\"field-value\", {'field-is-active': isActive})}>\n        {item[0] !== 'id' ? item[1] : ''}\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <div className=\"field-key\">{item[0] !== 'id' ? item[0] : ''}</div>\n      <div className=\"field-string\">\n        {infoFieldValue()}\n        <div>\n          {!isActive ? (item[0] === 'id' ? '' : (\n            <button\n              type=\"button\"\n              className=\"field-edit-button\"\n              onClick={() => { setActive(!isActive) }}\n            >\n              Edit\n            </button>\n          ))\n            : (\n              <div className=\"field-changer\">\n                <form\n                  onSubmit={submitHandler}\n                >\n                  <input\n                    type={handleInputType()}\n                    pattern={isPhoneNumber ? \"[+]{1}[0-9]{12}\" : ''}\n                    value={value}\n                    onChange={(event) => {\n                      setValue(event.target.value)\n                    }}\n                  />\n                  <section>\n                    <button\n                      type=\"submit\"\n                      className=\"field-edit-button\"\n                    >\n                      Save changes\n                    </button>\n\n                    <button\n                      type=\"button\"\n                      className=\"field-edit-button\"\n                      onClick={() => {\n                        setActive(false);\n                        setValue([item[1]]);\n                      }}\n                    >\n                      Cancel\n                    </button>\n                  </section>\n                </form>\n              </div>\n          )}\n        </div>\n      </div>\n    </>\n  )\n}\n\nField.propTypes = {\n  item: PropTypes.array.isRequired,\n}\n","import React, { useState, useContext } from 'react';\nimport { ContactsContext } from '../../utils/ContactsContext';\nimport { Field } from '../Field';\nimport './ContactInfo.scss';\n\nexport const ContactInfo = () => {\n  const [newField, setNewField] = useState('');\n  const [newValue, setNewValue] = useState('');\n\n  const { selectedContact, selectId } = useContext(ContactsContext);\n\n  let entries = null;\n  if (!selectedContact) {\n    return;\n  }\n  entries = Object.entries(selectedContact);\n\n  const addField = (newNote, newValue) => {\n    const newSection = {\n      [newNote]: newValue,\n    };\n    Object.assign(selectedContact, newSection)\n  }\n\n  const clearFields = () => {\n    setNewField('');\n    setNewValue('');\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    addField(newField, newValue);\n    clearFields();\n  }\n\n  return (\n    <div className=\"contact-info main__form\">\n      <h2 className=\"title\">Contact information</h2>\n      {entries.map(item => (\n        <section\n          key={Math.random()}\n          className=\"contact-info-list\"\n        >\n          <Field\n            item={item}\n          />\n        </section>\n      ))}\n      <hr></hr>\n\n      <h3 className=\"title\">\n        Add new notes to this contact\n      </h3>\n      <form onSubmit={submitHandler}>\n        <section className=\"contact-info-inputs\">\n          <input\n            type=\"text\"\n            name=\"newField\"\n            placeholder=\"Enter note name\"\n            className=\"input\"\n            value={newField}\n            onChange={(event) => {\n              setNewField(event.target.value);\n            }}\n            required\n          />\n          <input\n            type=\"text\"\n            name=\"newValue\"\n            placeholder=\"Enter note text\"\n            className=\"input\"\n            value={newValue}\n            onChange={(event) => {\n              setNewValue(event.target.value);\n            }}\n            required\n          />\n        </section>\n        <section className='contact-info-buttons'>\n          <button\n            type=\"submit\"\n            className=\"button contact-info-button\"\n          >\n            Add note\n          </button>\n          <button\n            type=\"button\"\n            className=\"button contact-info-button\"\n            onClick={() => {\n              selectId(0)\n            }}\n          >\n            Exit\n          </button>\n        </section>\n        \n      </form>\n\n    </div>\n  )\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { useLocalStorage } from './utils/useLocalStarage';\nimport { AddContactForm } from './components/AddContactForm';\nimport { ContactsList } from './components/ContactsList';\nimport { ContactInfo } from './components/ContactInfo';\nimport { ContactsContext } from './utils/ContactsContext';\n\nfunction App() {\n  const [contacts, setContacts] = useLocalStorage('contacts', []);\n  const [selectedId, setSelectedId] = useState(0);\n  const [openForm, setOpenForm] = useState(false);\n\n  const selectedContact = contacts.find(contact => (\n    contact.id === selectedId\n  ))\n\n  const addContact = (newContact) => {\n    setContacts(\n      [...contacts,\n        newContact\n      ]\n    )\n  }\n\n  const selectId = (id) => {\n    setSelectedId(id)\n  }\n\n  const removeContact = (contactId) => {\n    /* eslint-disable-next-line */\n    const result = confirm('Do you really want to delete this contact?')\n    if (result) {\n      setContacts(contacts.filter(item => (\n        contactId !== item.id\n      )))\n    }\n  }\n\n  const changeContact = (changedContact) => {\n    setContacts(changedContact)\n  }\n\n  const contextValue = {\n    addContact: addContact,\n    contacts,\n    selectedContact,\n    selectedId,\n    selectId,\n    removeContact,\n    changeContact,\n    setOpenForm,\n  }\n\n  return (\n    <div className=\"main\">\n      <ContactsContext.Provider value={contextValue}>\n        {(!openForm && selectedId === 0) && (\n          <ContactsList />\n        )}\n        \n        {openForm && (\n          <AddContactForm />\n        )}\n        \n        {selectedId !== 0 && (\n          <ContactInfo />\n        )}\n      </ContactsContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(() => {\n    try {\n      return JSON.parse(localStorage.getItem(key)) || initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n  const save = (value) => {\n    setValue(value);\n    localStorage.setItem(key, JSON.stringify(value));\n  };\n  return [value, save];\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
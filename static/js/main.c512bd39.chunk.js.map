{"version":3,"sources":["utils/ContactsContext.jsx","components/AddContactForm/AddContactForm.jsx","components/ContactsList/ContactsList.jsx","components/Field/Field.jsx","components/ContactInfo/ContactInfo.jsx","App.jsx","utils/useLocalStarage.jsx","index.jsx"],"names":["ContactsContext","React","createContext","AddContactForm","useState","name","setName","number","setNumber","email","setEmail","birthday","setBirthday","info","setInfo","addContact","useContext","newContact","id","Date","className","onSubmit","event","preventDefault","type","placeholder","autoFocus","value","onChange","target","required","max","ContactsList","visibleContacts","contacts","selectedId","selectId","removeContact","query","setQuery","newQuery","toLocaleLowerCase","filter","contact","toLowerCase","startsWith","length","map","toUpperCase","onClick","disabled","Field","item","changeContact","setValue","isActive","setActive","title","classNames","confirm","changeNote","ContactInfo","newField","setNewField","newValue","setNewValue","selectedContact","entries","Object","Math","random","newNote","newSection","assign","addField","App","key","initialValue","JSON","parse","localStorage","getItem","setItem","stringify","useLocalStorage","setContacts","setSelectedId","find","Provider","contactId","changedContact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c512bd39.chunk.js","sourcesContent":["import React from 'react';\n\nexport const ContactsContext = React.createContext([]);\n","import React, { useState, useContext } from 'react';\nimport { ContactsContext } from '../../utils/ContactsContext';\nimport './AddContactForm.scss';\n\nexport const AddContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('+380');\n  const [email, setEmail] = useState('');\n  const [birthday, setBirthday] = useState('');\n  const [info, setInfo] = useState('');\n\n  const { addContact } = useContext(ContactsContext);\n\n  const newContact = {\n    name,\n    number,\n    email,\n    birthday,\n    info,\n    id: +new Date(),\n  };\n\n  const clearFields = () => {\n    setName('');\n    setNumber('+380');\n    setEmail('');\n    setBirthday('');\n    setInfo('');\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    addContact(newContact);\n    clearFields();\n  }\n\n  return (\n    <form\n      className=\"add-form main__form\"\n      onSubmit={submitHandler}\n    >\n      <h2 className=\"title\">New contact form</h2>\n      <label>\n        Person's name\n        <div className=\"add-field\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter full name\"\n            className=\"input\"\n            autoFocus={true}\n            value={name}\n            onChange={(event) => {\n              setName(event.target.value)\n            }}\n            required\n          />\n        </div>\n      </label>\n\n      <label>\n        Person's phone number\n        <div className=\"add-field\">\n          <input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Enter phone number\"\n            className=\"input\"\n            value={number}\n            onChange={(event) => {\n              setNumber(event.target.value)\n            }}\n          />\n        </div>\n      </label>\n\n      <label>\n        Person's e-mail\n        <div className=\"add-field\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Enter e-mail\"\n            className=\"input\"\n            value={email}\n            onChange={(event) => {\n              setEmail(event.target.value)\n            }}\n          />\n        </div>\n      </label>\n\n      <label>\n        Person's birthday\n        <div className=\"add-field\">\n          <input\n            type=\"date\"\n            max=\"2015-01-01\"\n            name=\"birthday\"\n            className=\"input input-birthday\"\n            value={birthday}\n            onChange={(event) => {\n              setBirthday(event.target.value)\n            }}\n          />\n        </div>\n      </label>\n\n      <label>\n        Person's information\n        <div className=\"add-field\">\n          <textarea\n            name=\"info\"\n            placeholder=\"Enter additional information\"\n            className=\"input add-field-textarea\"\n            value={info}\n            onChange={(event) => {\n              setInfo(event.target.value)\n            }}\n          />\n        </div>\n      </label>\n\n      <div>\n        <button\n          type=\"submit\"\n          className=\"button\"\n        >\n          Add contact\n        </button>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { useContext } from 'react/cjs/react.development';\nimport { ContactsContext } from '../../utils/ContactsContext';\nimport './ContactsList.scss';\n\nexport const ContactsList = () => {\n  const { contacts, selectedId, selectId, removeContact } = useContext(ContactsContext);\n\n  const [query, setQuery] = useState('');\n\n  const newQuery = query.toLocaleLowerCase();\n  let visibleContacts;\n  if (!query) {\n    visibleContacts = contacts;\n  } else {\n    visibleContacts = contacts.filter(contact => \n      contact.name.toLowerCase().startsWith(newQuery))\n  }\n\n  return (\n    <div className=\"contacts-list main__form\">\n\n      {contacts.length < 1 ? (\n        <h2 className=\"title\">No contacts</h2>\n      ) : (\n          <>\n            <h2 className=\"title\">Contacts</h2>\n\n            <input\n              className=\"input contacts-input\"\n              type=\"text\"\n              name=\"query\"\n              placeholder=\"Enter first letters to find contact\"\n              value={query}\n              onChange={(event) => {\n                setQuery(event.target.value)\n              }}\n            />\n\n            {visibleContacts.map(contact => (\n              <div key={contact.id} className=\"contacts-item\">\n                <strong>{contact.name.toUpperCase()}</strong>\n                <div className=\"contacts-list-buttons\">\n\n                  <button\n                    type=\"button\"\n                    className=\"button contacts-list-button\"\n                    onClick={() => {\n                      removeContact(contact.id)\n                    }}\n                    disabled={contact.id === selectedId}\n                  >\n                    Delete\n                  </button>\n\n                  {contact.id !== selectedId ? (\n                    <button\n                      type=\"button\"\n                      className=\"button contacts-list-button\"\n                      onClick={() => {\n                        selectId(contact.id)\n                      }}\n                    >\n                      View\n                    </button>\n                  ) : (\n                    <button\n                      type=\"button\"\n                      className=\"button contacts-list-button\"\n                      onClick={() => {\n                        selectId(0)\n                      }}\n                    >\n                      Close\n                    </button>\n                  )}\n\n                </div>\n              </div>\n            ))}\n          </>\n      )}\n\n    </div >\n  )\n};\n","import { useState, useContext } from 'react';\nimport { ContactsContext } from '../../utils/ContactsContext';\nimport './Field.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const Field = ({ item }) => {\n  const { changeContact, selectedId, contacts } = useContext(ContactsContext);\n\n  const [value, setValue] = useState([item[1]]);\n  const [isActive, setActive] = useState(false);\n\n  const changeNote = (selectedId) => {\n    /* eslint-disable-next-line */\n    let result = confirm('Do you really want to save changes?')\n    if (!result) {\n      setValue([item[1]])\n    } else {\n      changeContact(\n        contacts.map(contact => {\n          if (contact.id !== selectedId) {\n            return contact;\n          }\n          return {\n            ...contact,\n            [item[0]]: value,\n          }\n        })\n      )\n    }\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    changeNote(selectedId);\n    setActive(false);\n  }\n\n  return (\n    <>\n      <div className=\"contact-info-key\">{item[0] !== 'id' ? item[0] : ''}</div>\n      <div className=\"contact-info-string\">\n        <div\n          title=\"Click to change\"\n          className={classNames(\"contact-info-value\", {'field-not-active': isActive})}\n          onClick={() => { setActive(!isActive) }}\n        >\n          {item[0] !== 'id' ? item[1] : ''}\n        </div>\n\n        <div>\n          {!isActive ? (item[0] === 'id' ? '' : (\n            <button\n              type=\"button\"\n              className=\"field-edit-button\"\n              onClick={() => { setActive(!isActive) }}\n            >\n              Edit\n            </button>\n          ))\n            : (\n              <div className=\"field-changer\">\n                <form\n                  onSubmit={submitHandler}\n                >\n                  <input\n                    type=\"text\"\n                    value={value}\n                    onChange={(event) => {\n                      setValue(event.target.value)\n                    }}\n                  />\n                  <button\n                    type=\"submit\"\n                    className=\"field-edit-button\"\n                  >\n                    Save changes\n                  </button>\n\n                  <button\n                    type=\"button\"\n                    className=\"field-edit-button\"\n                    onClick={() => {\n                      setActive(false);\n                      setValue([item[1]]);\n                    }}\n                  >\n                    Cancel\n                  </button>\n                </form>\n              </div>\n          )}\n\n          {/* <span\n            title=\"click to delete\"\n            className=\"contact-info-remove\"\n            onClick={() => {\n              setContacts(\n                contacts.map(contact => {\n                  if (contact.id !== selectedId) {\n                    return contact;\n                  }\n                  return {\n                    ...contact,\n                    [item[0]]: '',  //! completely to delete\n                  }\n                })\n              )\n            }}\n          >\n            {item[0] !== 'id' ? 'x' : ''}\n          </span> */}\n        </div>\n\n      </div>\n    </>\n  )\n}\n\nField.propTypes = {\n  item: PropTypes.array.isRequired,\n}\n","import React, { useState } from 'react';\nimport { useContext } from 'react/cjs/react.development';\nimport { ContactsContext } from '../../utils/ContactsContext';\nimport { Field } from '../Field';\nimport './ContactInfo.scss';\n\nexport const ContactInfo = () => {\n  const [newField, setNewField] = useState('');\n  const [newValue, setNewValue] = useState('');\n\n  const { selectedContact } = useContext(ContactsContext);\n\n  let entries = null;\n  if (!selectedContact) {\n    return;\n  }\n  entries = Object.entries(selectedContact);\n\n  const addField = (newNote, newValue) => {\n    const newSection = {\n      [newNote]: newValue,\n    };\n    Object.assign(selectedContact, newSection)\n  }\n\n  const clearFields = () => {\n    setNewField('');\n    setNewValue('');\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    addField(newField, newValue);\n    clearFields();\n  }\n\n  return (\n    <div className=\"contact-info main__form\">\n      <h2 className=\"title\">Contact information</h2>\n      {entries.map(item => (\n        <section\n          key={Math.random()}\n          className=\"contact-info-list\"\n        >\n          <Field\n            item={item}\n          />\n        </section>\n      ))}\n      <hr></hr>\n\n      <h3 className=\"title\">\n        Add new notes to this contact\n      </h3>\n      <form onSubmit={submitHandler}>\n        <section className=\"contact-info-inputs\">\n          <input\n            type=\"text\"\n            name=\"newField\"\n            placeholder=\"Enter note name\"\n            className=\"input\"\n            value={newField}\n            onChange={(event) => {\n              setNewField(event.target.value);\n            }}\n            required\n          />\n          <input\n            type=\"text\"\n            name=\"newValue\"\n            placeholder=\"Enter note text\"\n            className=\"input\"\n            value={newValue}\n            onChange={(event) => {\n              setNewValue(event.target.value);\n            }}\n            required\n          />\n        </section>\n        <button\n          type=\"submit\"\n          className=\"button contact-info-button\"\n        >\n          Add note\n        </button>\n      </form>\n\n    </div>\n  )\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { useLocalStorage } from './utils/useLocalStarage';\nimport { AddContactForm } from './components/AddContactForm';\nimport { ContactsList } from './components/ContactsList';\nimport { ContactInfo } from './components/ContactInfo';\nimport { ContactsContext } from './utils/ContactsContext';\n\nfunction App() {\n  const [contacts, setContacts] = useLocalStorage('contacts', []);\n  const [selectedId, setSelectedId] = useState(0);\n\n  const selectedContact = contacts.find(contact => (\n    contact.id === selectedId\n  ))\n\n  const addContact = (newContact) => {\n    setContacts(\n      [...contacts,\n        newContact\n      ]\n    )\n  }\n\n  const selectId = (id) => {\n    setSelectedId(id)\n  }\n\n  const removeContact = (contactId) => {\n    /* eslint-disable-next-line */\n    const result = confirm('Do you really want to delete this contact?')\n    if (result) {\n      setContacts(contacts.filter(item => (\n        contactId !== item.id\n      )))\n    }\n  }\n\n  const changeContact = (changedContact) => {\n    setContacts(changedContact)\n  }\n\n  return (\n    <div className=\"main\">\n      <ContactsContext.Provider value={{\n        addContact: addContact,\n        contacts,\n        selectedContact,\n        selectedId,\n        selectId,\n        removeContact,\n        changeContact,\n      }}>\n        <AddContactForm />\n        <ContactsList />\n\n        {selectedId !== 0 && (\n          <ContactInfo />\n        )}\n      </ContactsContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(() => {\n    try {\n      return JSON.parse(localStorage.getItem(key)) || initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n  const save = (value) => {\n    setValue(value);\n    localStorage.setItem(key, JSON.stringify(value));\n  };\n  return [value, save];\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
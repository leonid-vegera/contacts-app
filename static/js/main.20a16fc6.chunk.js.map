{"version":3,"sources":["components/AddContactForm/AddContactForm.jsx","components/ContactsList/ContactsList.jsx","components/Field/Field.jsx","components/ContactInfo/ContactInfo.jsx","App.jsx","index.jsx"],"names":["AddContactForm","setContacts","contacts","useState","name","setName","number","setNumber","email","setEmail","birthday","setBirthday","info","setInfo","className","onSubmit","event","preventDefault","newContact","id","Date","addContact","type","placeholder","value","onChange","target","required","max","ContactsList","visibleContacts","setSelectedId","selectedId","removeContact","query","setQuery","newQuery","toLocaleLowerCase","filter","contact","toLowerCase","startsWith","length","map","toUpperCase","onClick","disabled","Field","item","setValue","isActive","setActive","title","classNames","confirm","changeNote","ContactInfo","newField","setNewField","newValue","setNewValue","entries","Object","Math","random","newNote","newSection","assign","addField","App","selectedPerson","find","contactId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20a16fc6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './AddContactForm.scss';\n\nexport const AddContactForm = ({ setContacts, contacts }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('+380');\n  const [email, setEmail] = useState('');\n  const [birthday, setBirthday] = useState('');\n  const [info, setInfo] = useState('');\n\n  const addContact = (name, number, email, birthday, info) => {\n    const newContact = {\n      name,\n      number,\n      email,\n      birthday,\n      info,\n      id: +new Date(),\n    };\n    setContacts(\n      [...contacts,\n        newContact\n      ]\n    )\n  }\n\n  const clearFields = () => {\n    setName('');\n    setNumber('+380');\n    setEmail('');\n    setBirthday('');\n    setInfo('');\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    addContact(name, number, email, birthday, info);\n    clearFields();\n  }\n\n  return (\n    <form\n      className=\"add-form main__form\"\n      onSubmit={submitHandler}\n    >\n      <h2 className=\"title\">New contact form</h2>\n      <label>\n        Person's name\n        <div className=\"add-field\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter full name\"\n            className=\"input\"\n            value={name}\n            onChange={(event) => {\n              setName(event.target.value)\n            }}\n            required\n          />\n        </div>\n      </label>\n\n      <label>\n        Person's phone number\n        <div className=\"add-field\">\n          <input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Enter phone number\"\n            className=\"input\"\n            value={number}\n            onChange={(event) => {\n              setNumber(event.target.value)\n            }}\n          />\n        </div>\n      </label>\n\n      <label>\n        Person's e-mail\n        <div className=\"add-field\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Enter e-mail\"\n            className=\"input\"\n            value={email}\n            onChange={(event) => {\n              setEmail(event.target.value)\n            }}\n          />\n        </div>\n      </label>\n\n      <label>\n        Person's birthday\n        <div className=\"add-field\">\n          <input\n            type=\"date\"\n            max=\"2011-01-01\"\n            name=\"birthday\"\n            className=\"input input-birthday\"\n            value={birthday}\n            onChange={(event) => {\n              setBirthday(event.target.value)\n            }}\n          />\n        </div>\n      </label>\n\n      <label>\n        Person's information\n        <div className=\"add-field\">\n          <textarea\n            name=\"info\"\n            placeholder=\"Enter additional information\"\n            className=\"input add-field-textarea\"\n            value={info}\n            onChange={(event) => {\n              setInfo(event.target.value)\n            }}\n          />\n        </div>\n      </label>\n\n      <div>\n        <button\n          type=\"submit\"\n          className=\"button\"\n        >\n          Add contact\n        </button>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './ContactsList.scss';\n\nexport const ContactsList = ({ contacts, setSelectedId, selectedId, removeContact }) => {\n  const [query, setQuery] = useState('');\n\n  const newQuery = query.toLocaleLowerCase();\n  let visibleContacts;\n  if (!query) {\n    visibleContacts = contacts;\n  } else {\n    visibleContacts = contacts.filter(contact => \n      contact.name.toLowerCase().startsWith(newQuery))\n  }\n\n  return (\n    <div className=\"contacts-list main__form\">\n\n      {contacts.length < 1 ? (\n        <h2 className=\"title\">No contacts</h2>\n      ) : (\n          <>\n            <h2 className=\"title\">Contacts</h2>\n\n            <input\n              className=\"input contacts-input\"\n              type=\"text\"\n              name=\"query\"\n              placeholder=\"Enter first letters to find contact\"\n              value={query}\n              onChange={(event) => {\n                setQuery(event.target.value)\n              }}\n            />\n\n            {visibleContacts.map(contact => (\n              <div key={contact.id} className=\"contacts-item\">\n                <strong>{contact.name.toUpperCase()}</strong>\n                <div className=\"contacts-list-buttons\">\n\n                  <button\n                    type=\"button\"\n                    className=\"button contacts-list-button\"\n                    onClick={() => {\n                      removeContact(contact.id)\n                    }}\n                    disabled={contact.id === selectedId}\n                  >\n                    Delete\n                  </button>\n\n                  {contact.id !== selectedId ? (\n                    <button\n                      type=\"button\"\n                      className=\"button contacts-list-button\"\n                      onClick={() => {\n                        setSelectedId(contact.id)\n                      }}\n                    >\n                      View\n                    </button>\n                  ) : (\n                    <button\n                      type=\"button\"\n                      className=\"button contacts-list-button\"\n                      onClick={() => {\n                        setSelectedId(0)\n                      }}\n                    >\n                      Close\n                    </button>\n                  )}\n\n                </div>\n              </div>\n            ))}\n          </>\n      )}\n\n    </div >\n  )\n};\n","import { useState } from 'react';\nimport './Field.scss';\nimport classNames from 'class-names';\n\nexport const Field = ({ setContacts, selectedId, contacts, item }) => {\n  const [value, setValue] = useState([item[1]]);\n  const [isActive, setActive] = useState(false);\n\n  const changeNote = (selectedId) => {\n    /* eslint-disable-next-line */\n    let result = confirm('Do you really want to save changes?')\n    if (!result) {\n      setValue([item[1]])\n    } else {\n      setContacts(\n        contacts.map(contact => {\n          if (contact.id !== selectedId) {\n            return contact;\n          }\n          return {\n            ...contact,\n            [item[0]]: value,\n          }\n        })\n      )\n    }\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    changeNote(selectedId);\n    setActive(false);\n  }\n  return (\n    <>\n      <div className=\"contact-info-key\">{item[0] !== 'id' ? item[0] : ''}</div>\n      <div className=\"contact-info-string\">\n        <div\n          title=\"Click to change\"\n          className={classNames(\"contact-info-value\", {'field-not-active': isActive})}\n          onClick={() => { setActive(!isActive) }}\n        >\n          {item[0] !== 'id' ? item[1] : ''}\n        </div>\n\n        <div>\n          {!isActive ? (item[0] === 'id' ? '' : (\n            <button\n              type=\"button\"\n              className=\"field-edit-button\"\n              onClick={() => { setActive(!isActive) }}\n            >\n              Edit\n            </button>\n          ))\n            : (\n              <div className=\"field-changer\">\n                <form\n                  onSubmit={submitHandler}\n                >\n                  <input\n                    type=\"text\"\n                    value={value}\n                    onChange={(event) => {\n                      setValue(event.target.value)\n                    }}\n                  />\n                  <button\n                    type=\"submit\"\n                    className=\"field-edit-button\"\n                  >\n                    Save changes\n                  </button>\n\n                  <button\n                    type=\"button\"\n                    className=\"field-edit-button\"\n                    onClick={() => {\n                      setActive(false);\n                      setValue([item[1]]);\n                    }}\n                  >\n                    Cancel\n                  </button>\n                </form>\n              </div>\n          )}\n\n          {/* <span\n            title=\"click to delete\"\n            className=\"contact-info-remove\"\n            onClick={() => {\n              setContacts(\n                contacts.map(contact => {\n                  if (contact.id !== selectedId) {\n                    return contact;\n                  }\n                  return {\n                    ...contact,\n                    [item[0]]: '',  //! completely to delete\n                  }\n                })\n              )\n            }}\n          >\n            {item[0] !== 'id' ? 'x' : ''}\n          </span> */}\n        </div>\n\n      </div>\n    </>\n  )\n}\n","import React, { useState } from 'react';\nimport { Field } from '../Field';\nimport './ContactInfo.scss';\n\nexport const ContactInfo = ({ contact, contacts, setContacts, selectedId }) => {\n  const [newField, setNewField] = useState('');\n  const [newValue, setNewValue] = useState('');\n\n  let entries = null;\n  if (!contact) {\n    return;\n  }\n  entries = Object.entries(contact);\n\n  const addField = (newNote, newValue) => {\n    const newSection = {\n      [newNote]: newValue,\n    };\n    Object.assign(contact, newSection)\n  }\n\n  const clearFields = () => {\n    setNewField('');\n    setNewValue('');\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    addField(newField, newValue);\n    clearFields();\n  }\n\n  return (\n    <div className=\"contact-info main__form\">\n      <h2 className=\"title\">Contact information</h2>\n      {entries.map(item => (\n        <section\n          key={Math.random()}\n          className=\"contact-info-list\"\n        >\n          <Field\n            setContacts={setContacts}\n            selectedId={selectedId}\n            contacts={contacts}\n            item={item}\n          />\n        </section>\n      ))}\n      <hr></hr>\n\n      <h3 className=\"title\">\n        Add new notes to this contact\n      </h3>\n      <form onSubmit={submitHandler}>\n        <section className=\"contact-info-inputs\">\n          <input\n            type=\"text\"\n            name=\"newField\"\n            placeholder=\"Enter note name\"\n            className=\"input\"\n            value={newField}\n            onChange={(event) => {\n              setNewField(event.target.value);\n            }}\n            required\n          />\n          <input\n            type=\"text\"\n            name=\"newValue\"\n            placeholder=\"Enter note text\"\n            className=\"input\"\n            value={newValue}\n            onChange={(event) => {\n              setNewValue(event.target.value);\n            }}\n            required\n          />\n        </section>\n        <button\n          type=\"submit\"\n          className=\"button contact-info-button\"\n        >\n          Add note\n        </button>\n      </form>\n\n    </div>\n  )\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { AddContactForm } from './components/AddContactForm';\nimport { ContactsList } from './components/ContactsList';\nimport { ContactInfo } from './components/ContactInfo';\n\nfunction App() {\n  const [contacts, setContacts] = useState([]);\n  const [selectedId, setSelectedId] = useState(0);\n\n  const selectedPerson = contacts.find(contact => (\n    contact.id === selectedId\n  ))\n\n  const removeContact = (contactId) => {\n    /* eslint-disable-next-line */\n    const result = confirm('Do you really want to delete this contact?')\n    if (result) {\n      setContacts(contacts.filter(item => (\n        contactId !== item.id\n      )))\n    }\n  }\n\n  return (\n    <div className=\"main\">\n      <AddContactForm\n        contacts={contacts}\n        setContacts={setContacts}\n      />\n\n      <ContactsList\n        contacts={contacts}\n        setSelectedId={setSelectedId}\n        selectedId={selectedId}\n        removeContact={removeContact}\n      />\n\n      {selectedId !== 0 && (\n        <ContactInfo\n          contact={selectedPerson}\n          contacts={contacts}\n          setContacts={setContacts}\n          selectedId={selectedId}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}